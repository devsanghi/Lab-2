$date
	Wed Nov  8 23:06:23 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 1 ! halt $end
$var reg 1 " clk $end
$var reg 1 # rst $end
$scope module CPU $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var wire 1 $ zero $end
$var wire 7 % opcode [6:0] $end
$var wire 1 & negative $end
$var wire 2 ' nPC_sel [1:0] $end
$var wire 1 ! halt $end
$var wire 7 ( funct7 [6:0] $end
$var wire 3 ) funct3 [2:0] $end
$var wire 32 * extended_Uimm [31:0] $end
$var wire 32 + extended_Simm [31:0] $end
$var wire 32 , extended_Jimm [31:0] $end
$var wire 32 - extended_Iimm [31:0] $end
$var wire 32 . extended_Bimm [31:0] $end
$var wire 20 / Uimm20 [19:0] $end
$var wire 12 0 Simm12 [11:0] $end
$var wire 5 1 Rsrc2 [4:0] $end
$var wire 5 2 Rsrc1 [4:0] $end
$var wire 5 3 Rdst [4:0] $end
$var wire 32 4 Rdata2 [31:0] $end
$var wire 32 5 Rdata1 [31:0] $end
$var wire 32 6 RWrdata_0 [31:0] $end
$var wire 32 7 RWrdata [31:0] $end
$var wire 1 8 RWrEn $end
$var wire 32 9 PC_Plus_4 [31:0] $end
$var wire 32 : PC_JALR [31:0] $end
$var wire 32 ; PC_Imm [31:0] $end
$var wire 1 < PCSrc $end
$var wire 32 = PC [31:0] $end
$var wire 32 > NPC_noJALR [31:0] $end
$var wire 32 ? NPC [31:0] $end
$var wire 1 @ MemtoReg $end
$var wire 1 A MemWrEn $end
$var wire 2 B MemSize [1:0] $end
$var wire 21 C Jimm21 [20:0] $end
$var wire 32 D InstWord [31:0] $end
$var wire 32 E Imm_extended [31:0] $end
$var wire 12 F Iimm12 [11:0] $end
$var wire 1 G ExtOp $end
$var wire 32 H DataWord [31:0] $end
$var wire 1 I BranchControlSignal $end
$var wire 1 J BranchAnd $end
$var wire 13 K Bimm13 [12:0] $end
$var wire 32 L ALUresult [31:0] $end
$var wire 32 M ALUop2 [31:0] $end
$var wire 4 N ALUctr [3:0] $end
$var wire 1 O ALUSrc $end
$scope module ALU1 $end
$var wire 32 P signed_a [31:0] $end
$var wire 32 Q signed_b [31:0] $end
$var wire 1 $ zero $end
$var wire 1 & negative $end
$var wire 32 R b [31:0] $end
$var wire 32 S a [31:0] $end
$var wire 4 T ALUctr [3:0] $end
$var reg 32 U result [31:0] $end
$upscope $end
$scope module AND1 $end
$var wire 1 $ b $end
$var wire 1 J out $end
$var wire 1 I a $end
$upscope $end
$scope module APC1 $end
$var wire 32 V PC [31:0] $end
$var reg 32 W out [31:0] $end
$upscope $end
$scope module API1 $end
$var wire 32 X PC [31:0] $end
$var wire 32 Y Imm [31:0] $end
$var reg 32 Z PC_Imm [31:0] $end
$upscope $end
$scope module API2 $end
$var wire 32 [ PC [31:0] $end
$var wire 32 \ Imm [31:0] $end
$var reg 32 ] PC_Imm [31:0] $end
$upscope $end
$scope module BCS1 $end
$var wire 3 ^ funct3 [2:0] $end
$var wire 1 & negative $end
$var wire 7 _ opcode [6:0] $end
$var wire 1 $ zero $end
$var reg 1 I BranchControlSignal $end
$upscope $end
$scope module CUNIT1 $end
$var wire 3 ` funct3 [2:0] $end
$var wire 7 a funct7 [6:0] $end
$var wire 7 b opcode [6:0] $end
$var reg 1 O ALUSrc $end
$var reg 4 c ALUctr [3:0] $end
$var reg 1 G ExtOp $end
$var reg 2 d MemSize [1:0] $end
$var reg 1 A MemWrEn $end
$var reg 1 @ MemtoReg $end
$var reg 1 8 RWrEn $end
$var reg 2 e nPC_sel [1:0] $end
$upscope $end
$scope module DMEM $end
$var wire 32 f Addr [31:0] $end
$var wire 32 g AddrH [31:0] $end
$var wire 32 h AddrW [31:0] $end
$var wire 1 " CLK $end
$var wire 2 i Size [1:0] $end
$var wire 1 A WEN $end
$var wire 32 j DataIn [31:0] $end
$var reg 32 k DataOut [31:0] $end
$upscope $end
$scope module EX1 $end
$var wire 13 l Bimm13 [12:0] $end
$var wire 1 G ExtOp $end
$var wire 12 m Iimm12 [11:0] $end
$var wire 21 n Jimm21 [20:0] $end
$var wire 12 o Simm12 [11:0] $end
$var wire 20 p Uimm20 [19:0] $end
$var wire 7 q opcode [6:0] $end
$var reg 32 r Imm_extended [31:0] $end
$var reg 32 s extended_Bimm [31:0] $end
$var reg 32 t extended_Iimm [31:0] $end
$var reg 32 u extended_Jimm [31:0] $end
$var reg 32 v extended_Simm [31:0] $end
$var reg 32 w extended_Uimm [31:0] $end
$upscope $end
$scope module IMEM $end
$var wire 32 x AddrW [31:0] $end
$var wire 1 " CLK $end
$var wire 2 y Size [1:0] $end
$var wire 32 z Addr [31:0] $end
$var reg 32 { DataOut [31:0] $end
$upscope $end
$scope module MUXI1 $end
$var wire 32 | b [31:0] $end
$var wire 1 O sel $end
$var wire 32 } a [31:0] $end
$var reg 32 ~ out [31:0] $end
$upscope $end
$scope module MUXI2 $end
$var wire 32 !" a [31:0] $end
$var wire 32 "" b [31:0] $end
$var wire 1 < sel $end
$var reg 32 #" out [31:0] $end
$upscope $end
$scope module MUXI3 $end
$var wire 32 $" a [31:0] $end
$var wire 32 %" b [31:0] $end
$var wire 1 @ sel $end
$var reg 32 &" out [31:0] $end
$upscope $end
$scope module MUXI4 $end
$var wire 32 '" a [31:0] $end
$var wire 32 (" b [31:0] $end
$var wire 1 )" sel $end
$var reg 32 *" out [31:0] $end
$upscope $end
$scope module MUXJALR1 $end
$var wire 32 +" a [31:0] $end
$var wire 32 ," b [31:0] $end
$var wire 2 -" sel [1:0] $end
$var reg 32 ." out [31:0] $end
$upscope $end
$scope module OR1 $end
$var wire 1 /" a $end
$var wire 1 J b $end
$var wire 1 < out $end
$upscope $end
$scope module PC_REG $end
$var wire 1 " CLK $end
$var wire 32 0" Din [31:0] $end
$var wire 1 # RST $end
$var wire 1 1" WEN $end
$var parameter 32 2" width $end
$var reg 32 3" Qout [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 4" AddrA [4:0] $end
$var wire 5 5" AddrB [4:0] $end
$var wire 5 6" AddrW [4:0] $end
$var wire 1 " CLK $end
$var wire 32 7" DataInW [31:0] $end
$var wire 1 8 WenW $end
$var reg 32 8" DataOutA [31:0] $end
$var reg 32 9" DataOutB [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 2"
$end
#0
$dumpvars
b10010001101000101011001111000 9"
b10010001101000101011001111000 8"
b10010001101000101011001111000 7"
b110 6"
b110 5"
b110 4"
b0 3"
01"
b100 0"
0/"
b100 ."
b0 -"
b10010001101000101011001111000 ,"
b100 +"
b10010001101000101011001111000 *"
0)"
b100 ("
b10010001101000101011001111000 '"
b10010001101000101011001111000 &"
bx %"
b10010001101000101011001111000 $"
b100 #"
b0 ""
b100 !"
b10010001101000101011001111000 ~
b10010001101000101011001111000 }
b0 |
b11000110111001100110011 {
b0 z
b10 y
b0 x
b11000110111000000000000 w
b110 v
b110111000000000110 u
b110 t
b110 s
b0 r
b110011 q
b11000110111 p
b110 o
b110111000000000110 n
b110 m
b110 l
bx k
b10010001101000101011001111000 j
b10 i
b10010001101000101011001111000 h
b10010001101000101011001111000 g
b10010001101000101011001111000 f
b0 e
b10 d
b10 c
b110011 b
b0 a
b111 `
b110011 _
b111 ^
b10010001101000101011001111000 ]
b10010001101000101011001111000 \
b0 [
b0 Z
b0 Y
b0 X
b100 W
b0 V
b10010001101000101011001111000 U
b10 T
b10010001101000101011001111000 S
b10010001101000101011001111000 R
b10010001101000101011001111000 Q
b10010001101000101011001111000 P
0O
b10 N
b10010001101000101011001111000 M
b10010001101000101011001111000 L
b110 K
0J
0I
bx H
1G
b110 F
b0 E
b11000110111001100110011 D
b110111000000000110 C
b10 B
1A
0@
b100 ?
b100 >
b0 =
0<
b0 ;
b10010001101000101011001111000 :
b100 9
08
b10010001101000101011001111000 7
b10010001101000101011001111000 6
b10010001101000101011001111000 5
b10010001101000101011001111000 4
b110 3
b110 2
b110 1
b110 0
b11000110111 /
b110 .
b110 -
b110111000000000110 ,
b110 +
b11000110111000000000000 *
b111 )
b0 (
b0 '
0&
b110011 %
0$
1#
0"
0!
$end
#5
1"
#10
b11111111111111111111000000000000 7
b11111111111111111111000000000000 *"
b11111111111111111111000000000000 7"
1&
b11111111111111111111000000000000 g
b11111111111111111111000000000000 h
b11111111111111111111000000000000 6
b11111111111111111111000000000000 &"
b11111111111111111111000000000000 '"
0!
b11111111111111111111000000000000 L
b11111111111111111111000000000000 U
b11111111111111111111000000000000 f
b11111111111111111111000000000000 $"
b11111111111111111111000000000000 Q
b11111111111111111111000000000000 M
b11111111111111111111000000000000 R
b11111111111111111111000000000000 ~
b0 4
b0 j
b0 }
b0 9"
b0 P
b0 5
b0 S
b0 \
b0 8"
1O
b0 N
b0 T
b0 c
08
b11111111111111111111000000000000 E
b11111111111111111111000000000000 Y
b11111111111111111111000000000000 r
b11111111111111111111000000000000 |
b11111111111111111111111111111110 ,
b11111111111111111111111111111110 u
b11111111111111111111000000000000 *
b11111111111111111111000000000000 w
b11111111111111111111011111100110 .
b11111111111111111111011111100110 s
b11111111111111111111111111100110 +
b11111111111111111111111111100110 v
b11111111111111111111111111111111 -
b11111111111111111111111111111111 t
b111111111111111111110 C
b111111111111111111110 n
b11111111111111111111 /
b11111111111111111111 p
b1011111100110 K
b1011111100110 l
b111111100110 0
b111111100110 o
b111111111111 F
b111111111111 m
b1111111 (
b1111111 a
b11111 1
b11111 5"
b11111 2
b11111 4"
b10111 %
b10111 _
b10111 b
b10111 q
b1000 ?
b1000 ."
b1000 0"
b11111111111111111111001100010111 D
b11111111111111111111001100010111 {
b11111111111111111111000000000100 :
b11111111111111111111000000000100 ]
b11111111111111111111000000000100 ,"
b1000 >
b1000 #"
b1000 +"
b100 x
b1000 9
b1000 W
b1000 !"
b1000 ("
b11111111111111111111000000000100 ;
b11111111111111111111000000000100 Z
b11111111111111111111000000000100 [
b11111111111111111111000000000100 ""
b100 =
b100 V
b100 X
b100 z
b100 3"
0"
